# Frontend Interaction functions.

Contract - Marketplace.sol


------------------SELLER/COMPANY-------------------
# 1 - Integrate gmail account to metamask address {If account abstraction is not used}
function mapEmailToAddress(string calldata _email, address _account) external{}

# 2 - Register to platform [If DAO Not Used]
function SellerRegisteration(uint256 _creditCardNumber) public{}

# 3 - List the shoes
function list(
    string memory _name,
    string memory _brand,
    string memory _image,
    uint256 _cost,
    uint256 _RB_Factor,
    uint256 _quantity
) public payable {}

# 4 - Confirmation by seller/ comapny that shoe has been delivered to buyer home address
function confirmDeliveryOfShoeBySeller(uint256 _orderId) public{}

-------------------BUYER-----------------------------------------
# 1 - Integrate gmail account to metamask address {If account abstraction is not used}
function mapEmailToAddress(string calldata _email, address _account) external {}

# 2 - Buy function called by user.
function buy(uint256 _id) public payable shoeValidity(_id) {}

# 3 - If buyer has purchased more than 3 shoes, this can be called.
function claimrbtokens() public {}

# 4 - function setUserHomeAddress(string memory _homeAddress) public {}

# 5 - function confirmDeliveryOfShoeByUser(uint256 _orderId) public{}

# 6 - If user owns more than 1 shoe
function selectShoe(uint256 _id) public returns(uint256) {}
----------------------------------------------------------------------------------------------------

Contract - GooglStepsApi.sol
# 1 - function sendRequest() to be called by user.

----------------------------------------------------------------------------------------------------
Contract - Wethregistry.sol
NOTHING TO CALLED HERE BY BUYER OR SELLER.

# 1 - Though function distributeBalanceToslot() will be called by automation
----------------------------------------------------------------------------------------------------
Contract - WethRewardModel.sol

# 1 - This function will only be called if the Event from previous function [sendRequest() on GoogleStepsApi.sol] is recorded true 
on frontend side or on frontEnd Side their is time dealy of 30 - 45 secs to call this function after first function. 
function recordFetchedSteps(address _account) public{}

# 2 - Claim and take the weth amount/ reward.
function takeRewardBasedOnShoeId(uint256 _shoeId) checkIfUserAlreadyClaimedDailyReward(msg.sender) public {}

# 3 - To show the reward of user on dashboard.
function getRewardDataOfUsers(address _account) public view returns(uint256)
-----------------------------------------------------------------------------------------------
Contract - Escrow.sol
NOTHING TO BE CALLED BY SELLER OR BUYER
-----------------------------------------------------------------------------------------------
Contract - KYC.sol
All 4 functions are straight forward.
-----------------------------------------------------------------------------------------------
Contract - Any other Contract
NOTHING TO BE CALLED BY SELLER OR BUYER
-----------------------------------------------------------------------------------------------

REWARD FLOW

1. Contract GoogleStepsAPI.sol - `sendRequest(string authToken)` function will be called by user
2. Contract WethRewardModel.sol - `recordFetchedSteps(address _account)` function will be called by user [CALL THIS AFTER 1 MINUTE AS CHAINLINK FUNCTIONS ARE SLOW]
3. Contract WethRewardModel.sol - `takeRewardBasedOnShoeId` funtion is to collect reward in user's wallet.
4. Contract WethRewardModel.sol - Some View functions may be useful for dashboard.
    function checkIfUserCollectedRewardOrNot(address _account) public view returns(bool){
        return s_rewardCollectedByUser[_account];
    }
    
    function getStepsOfUserInSlot(address _account) public view returns(uint256){
        return s_userSteps[_account];
    }

    function getTotalStepsInSlot(uint256 _slotId) public view returns(uint256){
        return s_totalStepsPerSlot[_slotId];
    }

    function getStepsShareOfUser(address _account) public view returns(uint256){
        return s_stepShareOfUser[_account];
    }

    function getRewardDataOfUsers(address _account) public view returns(uint256){
        return s_userRewards[_account];
    }     